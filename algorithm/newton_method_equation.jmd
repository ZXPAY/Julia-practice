---
title : Newtom method practice
date : 17th December 2020
bibliography: biblio.bib
---
â€‹
Output the html file by using Weave
```julia; eval = false
using Weave
weave("newton_method_equation.jmd", out_path = :pwd)
```

# Section 1 (Known the system(equation))

### Newton method iteration
$$
    x_{n+1} = x_n - \frac{f(x_n)}{f'(x_n)}
$$

## Example 1
Equation is below
$$
    f(x) = x^2 + 10 = 0
$$

Find the roots
```julia
# Float type
function func(x::Float64)
    return x^2 + 10
end
function der(x::Float64)
    return 2x
end
function newton_iter(x:: Float64)
    return x - func(x)/der(x)
end
# Complex float type
function func(x::Complex{Float64})
    return x^2 + 10
end
function der(x::Complex{Float64})
    return 2x
end
function newton_iter(x:: Complex{Float64})
    return x - func(x)/der(x)
end
```

Start $x_0 = 1 + i$
```julia
start_pt = 1.0+1im
for i=1:10
    global temp
    if i == 1
        temp = newton_iter(start_pt)
    end
    temp = newton_iter(temp)
    println(temp)
end
```

---

## Example 2
Equation is below, answer = 3, -2
$$
    f(x) = x^2 - x - 6 = 0
$$
```julia
# Float type
function func(x::Float64)
    return x^2 - x - 6 
end
function der(x::Float64)
    return 2x - 1
end
function newton_iter(x:: Float64)
    return x - func(x)/der(x)
end
# Complex float type
function func(x::Complex{Float64})
    return x^2 - x - 6 
end
function der(x::Complex{Float64})
    return 2x - 1
end
function newton_iter(x:: Complex{Float64})
    return x - func(x)/der(x)
end
```

Start $x_0 = 50.0$
```julia
start_pt = 50.0
for i=1:10
    global temp
    if i == 1
        temp = newton_iter(start_pt)
    end
    temp = newton_iter(temp)
    println(temp)
end
```

Start $x_0 = -50.0$
```julia
start_pt = -50.0
for i=1:10
    global temp
    if i == 1
        temp = newton_iter(start_pt)
    end
    temp = newton_iter(temp)
    println(temp)
end
```

---

# Section 2 (Unknown the system(equation))
## Create the test points
```julia
using Plots, JLD

# Create test points
function generate_test_points(filename::String, data_length=150)
    y = zeros(Float64, data_length, 1)
    x = range(0, step=1, length=data_length)
    for i=1:data_length
        if i < 20
            y[i] = cos(i/10) + 0.5*rand()
        elseif i < 40
            y[i] = y[i-1]+0.01*i + 0.5*rand()
        elseif i < 60
            y[i] = y[i-1]-cos(i/10) + 0.5*rand()
        elseif i < 80
            y[i] = y[i-1]+0.25 + 0.5*rand()
        elseif i < 100
            y[i] = y[i-1] - cos(i/2) + 0.5*rand()
        else
            y[i] = y[i-1] - 0.005*(i-120)^2 + 0.1 + 0.5*rand()
        end
    end
    y .-= 10
    append_temp = ""
    for temp in y
        append_temp *= string(temp) * ","
    end
    # save the test data 
    save(filename, "testpoint", y)
end
generate_test_points("testpoint.jld")
```

## Load the test points
```julia
# load the data
y = load("testpoint.jld", "testpoint")
plot(y)

```

## implement the iteration to find x such that the f(x) = 0
```julia
# implement the newton method
function newton_iter(x:: Float64)
    temp = convert(Int64, round(x, digits=0))
    return x - y[temp]/(y[temp]-y[temp-1])
end
```

## Start Newton iteration, START = 25
```julia
data_length = length(y)
func_xy = Array{Float64, 2}(undef, data_length, 2)
x_yiszero = 0
START = 25.0
sol_collect = zeros(Float64, 10, 1)
for i=1:10
    global(x_yiszero)
    if i == 1
        # start
        x_yiszero = newton_iter(START)
    else
        x_yiszero = newton_iter(x_yiszero)
    end
    println("$i: $x_yiszero")
    sol_collect[i] = x_yiszero
end
```

## Plot the result
```julia
answer = convert(Int64, round(x_yiszero, digits=0))
println("x= $answer, y[x] = ", y[answer])
plot(sol_collect, xlabel="iteration times", ylabel="y[x]", title="Find x result")
```

---

## Start Newton iteration, START = 120
```julia
data_length = length(y)
func_xy = Array{Float64, 2}(undef, data_length, 2)
x_yiszero = 0
START = 140.0
sol_collect = zeros(Float64, 10, 1)
for i=1:10
    global(x_yiszero)
    if i == 1
        # start
        x_yiszero = newton_iter(START)
    else
        x_yiszero = newton_iter(x_yiszero)
    end
    println("$i: $x_yiszero")
    sol_collect[i] = x_yiszero
end
```

## Plot the result
```julia
answer = convert(Int64, round(x_yiszero, digits=0))
println("x= $answer, y[x] = ", y[answer])
plot(sol_collect, xlabel="iteration times", ylabel="y[x]", title="Find x result")
```
